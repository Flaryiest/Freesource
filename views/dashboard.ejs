<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Free Source</title>
    <link rel="stylesheet" href="/css/dashboard.css" type="text/css">
    <link rel="stylesheet" href="/css/style.css" type="text/css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap" rel="stylesheet">
</head>
<body>
    <%- include("navbar") %>
    <% if (locals.currentUser.type === "contractor") { %>
        <div class="postSectionContainer">
            <div class="myPosts">My Posts</div>
            <div class="postContainer">
                <% posts.map((post) => { %>
                    <div class="post">
                        <div class="postHeader">
                            <div class="postTitle"> <%= post.title %> </div>
                            <div class="postPrice"> $<%= post.price %> </div>
                        </div>
                        <div class="postTags">
                            <% post.tags.map((tag) => { %>
                                <div class="postTag"> <%= tag %> </div>
                            <% }) %>
                        </div>
                        <div class="postUser"> <%= post.email %> </div>
                        <div class="postDescription"> <%= post.description %> </div>
                        <div class="postSubInfo">
                            <% const timestamp = String(post.created_timestamp).slice(0, 15) %>
                            <div class="postDate"> <%= timestamp %> </div>
                            <div class="postStatus"> Status: <span class="status"> <%= post.status %> </span> </div>
                        </div>
                        <form type="GET" action=<%= "/dashboard/delete/"  + post.id %> >
                            <button class="contact">Delete</button>
                        </form>    
                    </div>
                <% }) %>
            </div>
            </div>
    <% } else { %>
        <div class="sellerContent">
            <div class="userTags">
                <form method="POST" action="/dashboard/changeUserTags">
                <div class="myPosts">My Tags</div>
                <div class="form-group">
                    <div class="selectedTags">
                        <input class="hiddenSelectedTags" id="selectedTags" name="selectedTags" type="hidden">
                        <div>My Tags:</div>
                        <% userTags.forEach((tag) => { %>
                            <div> <%= tag %> </div>
                            <form method="POST" action="/dashboard/deleteUserTag">
                              <input class="hiddenSelectedTags" type="hidden" name="selectedTag" value="<%= tag %>">
                              <button type="submit">Remove</button>
                            </form>
                          <% }) %>
                          
                    </div>
                    <label for="tags">Tags</label>
                    <button class="button" type="submit">Submit</button>
                    <input class="input" type="search" id="tags" placeholder="Search tags...">

                    <div class="tagList"></div>
                </div>
            </form>
            </div>
        


            <div class="myPosts">My Tasks</div>
            
        </div>
    <% } %>
    
</body>
</html>


<script defer>
    const tagSearch = document.querySelector("#tags")
    const tagList = document.querySelector(".tagList")
    const selectedTags = document.querySelector(".selectedTags")
    const hiddenSelectedTags = document.querySelector(".hiddenSelectedTags")
    let tags = ['3D modeling', '3D printing', 'accounting', 'adaptability', 'advertising', 'aerospace', 'air conditioning repair', 'app development', 'artificial intelligence', 'assembly', 'automotive repair', 'baking', 'bartending', 'beekeeping', 'biotechnology', 'brand management', 'brewing', 'broadcasting', 'business cards', 'business strategy', 'calligraphy', 'carpentry', 'ceramics', 'choreography', 'cleaning', 'cloud computing', 'coaching', 'comedy', 'content creation', 'content strategy', 'cooking', 'copywriting', 'critical thinking', 'cuisine', 'custom artwork', 'custom cabinetry', 'custom framing', 'custom gifts', 'data analysis', 'digital marketing', 'drawing', 'drywall repair', 'e-learning', 'editing', 'e-commerce', 'emergency medical services', 'emotional intelligence', 'event planning', 'faucet installation', 'fireplace maintenance', 'fitness coaching', 'forestry', 'furniture design', 'game development', 'gardening', 'garden design', 'gutter cleaning', 'graphic design', 'holiday decorations', 'home cleaning', 'home maintenance', 'home organization', 'home repair', 'housekeeping', 'human resources', 'illustration', 'industrial design', 'interior design', 'interpretation', 'IT consulting', 'IT support', 'ironing', 'jewelry making', 'juggling', 'law', 'leadership', 'legal consulting', 'legal research', 'language translation', 'landscaping', 'landscaping design', 'lawn mowing', 'laundry', 'logo design', 'machine learning', 'makeup artistry', 'marketing strategy', 'martial arts', 'mathematics', 'mechanical engineering', 'meditation', 'mold removal', 'music composition', 'music production', 'nursing', 'nutrition', 'online marketing', 'organizational skills', 'oven cleaning', 'painting', 'paralegal work', 'personal errands', 'personal security', 'pest control', 'plumbing', 'plumbing installation', 'plumbing repair', 'private investigation', 'problem-solving', 'project management', 'property management', 'public relations', 'recycling', 'robotics', 'roof repair', 'roof replacement', 'sales', 'security services', 'SEO', 'shower repair', 'sign language', 'sink repair', 'smart home setup', 'software development', 'special effects', 'stove repair', 'stunt work', 'statistics', 'stress management', 'sustainability', 'tattoo design', 'tattoo removal', 'teaching', 'teamwork', 'time management', 'tile installation', 'training and development', 'translation', 'UX/UI design', 'vacuuming', 'virtual assistant services', 'virtual reality', 'web design', 'web development', 'welding', 'window cleaning', 'window replacement', 'yard work', 'zoning', 'writing', 'yoga'];
    tagSearch.addEventListener("input", (e) => {
        tagList.replaceChildren()

        let matchedTagCount = 0
            for (let i = 0; i < tags.length; i++) {
                if (matchedTagCount >= 10) {
                    break
                }
                if (tags[i].includes(e.target.value.toLowerCase())) {
                    const matchingTag = document.createElement('div')
                    matchingTag.classList.add("matchingTag")
                    const addTagButton = document.createElement('button')
                    addTagButton.type = "button"
                    addTagButton.classList.add("addTagButton")
                    addTagButton.textContent = "+"
                    addTagButton.value = tags[i][0].toUpperCase() + tags[i].substring(1)

                    addTagButton.addEventListener("click", (e) => {
                        if (hiddenSelectedTags.value) {
                        hiddenSelectedTags.value = hiddenSelectedTags.value + ", " + e.target.value
                        }
                        else {
                            hiddenSelectedTags.value = e.target.value
                        }
                        tagsIndex = tags.indexOf(e.target.value.toLowerCase())

                        tags.splice(tagsIndex, 1)
                        e.target.parentNode.parentNode.removeChild(e.target.parentNode)
                        let selectedTag = document.createElement("div")
                        selectedTag.textContent = e.target.value

                        deleteSelectedTagButton = document.createElement("button")
                        deleteSelectedTagButton.type = "button"
                        deleteSelectedTagButton.textContent = "-"
                        deleteSelectedTagButton.classList.add("deleteSelectedTagButton")

                        deleteSelectedTagButton.addEventListener("click", (e) => {
                            let temp = hiddenSelectedTags.value.replace(e.target.parentNode.textContent.slice(0, -1), '')
                            hiddenSelectedTags.value = temp
                            

                            const matchingTag = document.createElement('div')
                            matchingTag.classList.add("matchingTag")
                            const addTagButton = document.createElement('button')
                            addTagButton.type = "button"
                            addTagButton.classList.add("addTagButton")
                            addTagButton.textContent = "+"
                            addTagButton.value = tags[i][0].toUpperCase() + tags[i].substring(1)
                            matchingTag.textContent = e.target.parentNode.textContent.slice(0, -1)
                            matchingTag.appendChild(addTagButton)
                            
                            tagList.appendChild(matchingTag)
                            console.log(e.target.parentNode.textContent.slice(0, -1))
                            tags.push(e.target.parentNode.textContent.slice(0, -1).toLowerCase())
                            console.log(tags.length)
                            e.target.parentNode.parentNode.removeChild(e.target.parentNode)
                            tagSearch.dispatchEvent(new Event('input', { bubbles: true }));
                        })



                        selectedTag.appendChild(deleteSelectedTagButton)
                        selectedTags.appendChild(selectedTag)
                        console.log(hiddenSelectedTags.value)
                    })



                    matchingTag.textContent = tags[i][0].toUpperCase() + tags[i].substring(1)
                    matchingTag.appendChild(addTagButton)
                    tagList.appendChild(matchingTag)
                    matchedTagCount++
                }
        }

    })

    
</script>